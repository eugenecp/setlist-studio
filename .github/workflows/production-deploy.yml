# Deploy to Production with Azure Key Vault
# 
# Required GitHub Secrets:
# - AZURE_CREDENTIALS: Azure service principal credentials (JSON format)
# - AZURE_SUBSCRIPTION_ID: Azure subscription ID
# - GOOGLE_CLIENT_ID: Google OAuth client ID (optional)
# - GOOGLE_CLIENT_SECRET: Google OAuth client secret (optional)
# - MICROSOFT_CLIENT_ID: Microsoft OAuth client ID (optional)
# - MICROSOFT_CLIENT_SECRET: Microsoft OAuth client secret (optional)
# - FACEBOOK_APP_ID: Facebook app ID (optional)  
# - FACEBOOK_APP_SECRET: Facebook app secret (optional)

name: Deploy to Production with Azure Key Vault

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/production-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      update_secrets:
        description: 'Update Key Vault secrets'
        required: false
        default: false
        type: boolean

env:
  AZURE_WEBAPP_NAME: 'setliststudio-prod'
  AZURE_RESOURCE_GROUP: 'setliststudio-production'
  KEYVAULT_NAME: 'setliststudio-prod-kv'
  DOTNET_VERSION: '8.0.x'

jobs:
  # Security and quality checks
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore SetlistStudio.sln
    
    - name: Build solution
      run: dotnet build SetlistStudio.sln --configuration Release --no-restore
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
    
    - name: Security check
      id: security-check
      run: |
        # Check CodeQL analysis results for security issues
        # Note: CodeQL results are available through GitHub Security tab
        # This is a placeholder for additional security validation
        
        # Verify no high/critical security findings
        echo "🔍 Checking for security violations..."
        
        # In a real implementation, you would:
        # 1. Query GitHub API for CodeQL results
        # 2. Check for high/critical severity issues
        # 3. Fail the build if security issues found
        
        # For now, assume security check passes if CodeQL completed
        echo "✅ Security validation completed"
        echo "passed=true" >> $GITHUB_OUTPUT
  
  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-analysis
    if: needs.security-analysis.outputs.security-passed == 'true'
    
    outputs:
      test-passed: ${{ steps.test-results.outputs.passed }}
      coverage-report: ${{ steps.test-results.outputs.coverage }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore SetlistStudio.sln
    
    - name: Build solution
      run: dotnet build SetlistStudio.sln --configuration Release --no-restore
    
    - name: Run tests with coverage
      run: |
        dotnet test SetlistStudio.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
    
    - name: Process test results
      id: test-results
      run: |
        # Check test results
        if find ./TestResults -name "*.trx" -exec grep -l "outcome=\"Failed\"" {} \; | grep -q .; then
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "❌ Tests failed" >> $GITHUB_STEP_SUMMARY
          
          # Show failed test details
          echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
          find ./TestResults -name "*.trx" -exec grep -l "outcome=\"Failed\"" {} \; | head -10 | while read file; do
            echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
          done
          exit 1
        else
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Extract actual coverage percentage from coverage files
        COVERAGE_FILES=$(find ./TestResults -name "coverage.cobertura.xml" | head -1)
        if [[ -n "$COVERAGE_FILES" && -f "$COVERAGE_FILES" ]]; then
          # Extract line coverage percentage
          COVERAGE=$(grep -o 'line-rate="[0-9.]*"' "$COVERAGE_FILES" | head -1 | sed 's/line-rate="//;s/"//' | awk '{printf "%.0f", $1*100}')
          echo "coverage=${COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "📊 Code Coverage: ${COVERAGE:-0}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "⚠️ Coverage data not found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/
        retention-days: 30
  
  # Key Vault secret validation
  validate-keyvault-secrets:
    name: Validate Key Vault Secrets
    runs-on: ubuntu-latest
    needs: [security-analysis, build-and-test]
    if: needs.build-and-test.outputs.test-passed == 'true'
    
    outputs:
      secrets-valid: ${{ steps.secret-validation.outputs.valid }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Validate Key Vault accessibility
      run: |
        # Check if Key Vault exists and is accessible
        echo "🔍 Testing Key Vault connectivity..."
        
        if ! az keyvault show --name ${{ env.KEYVAULT_NAME }} --query "name" -o tsv >/dev/null 2>&1; then
          echo "❌ Key Vault '${{ env.KEYVAULT_NAME }}' is not accessible"
          echo "Please verify:"
          echo "1. Key Vault exists and name is correct"
          echo "2. Service principal has appropriate permissions"
          echo "3. Key Vault is not behind firewall restrictions"
          exit 1
        fi
        
        echo "✅ Key Vault is accessible"
    
    - name: Validate OAuth secrets
      id: secret-validation
      run: |
        echo "🔍 Validating OAuth secrets in Key Vault..."
        
        # Define required secrets
        REQUIRED_SECRETS=(
          "Authentication--Google--ClientId"
          "Authentication--Google--ClientSecret"
          "Authentication--Microsoft--ClientId"
          "Authentication--Microsoft--ClientSecret"
          "Authentication--Facebook--AppId"
          "Authentication--Facebook--AppSecret"
        )
        
        MISSING_SECRETS=()
        VALID_PROVIDERS=0
        
        # Check Google provider
        GOOGLE_ID=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Google--ClientId" --query "value" -o tsv 2>/dev/null || echo "")
        GOOGLE_SECRET=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Google--ClientSecret" --query "value" -o tsv 2>/dev/null || echo "")
        
        if [[ -n "$GOOGLE_ID" && "$GOOGLE_ID" != "REPLACE_WITH_ACTUAL_SECRET" && -n "$GOOGLE_SECRET" && "$GOOGLE_SECRET" != "REPLACE_WITH_ACTUAL_SECRET" ]]; then
          echo "✅ Google OAuth configured"
          ((VALID_PROVIDERS++))
        else
          echo "⚠️ Google OAuth not properly configured"
        fi
        
        # Check Microsoft provider
        MS_ID=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Microsoft--ClientId" --query "value" -o tsv 2>/dev/null || echo "")
        MS_SECRET=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Microsoft--ClientSecret" --query "value" -o tsv 2>/dev/null || echo "")
        
        if [[ -n "$MS_ID" && "$MS_ID" != "REPLACE_WITH_ACTUAL_SECRET" && -n "$MS_SECRET" && "$MS_SECRET" != "REPLACE_WITH_ACTUAL_SECRET" ]]; then
          echo "✅ Microsoft OAuth configured"
          ((VALID_PROVIDERS++))
        else
          echo "⚠️ Microsoft OAuth not properly configured"
        fi
        
        # Check Facebook provider
        FB_ID=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Facebook--AppId" --query "value" -o tsv 2>/dev/null || echo "")
        FB_SECRET=$(az keyvault secret show --vault-name ${{ env.KEYVAULT_NAME }} --name "Authentication--Facebook--AppSecret" --query "value" -o tsv 2>/dev/null || echo "")
        
        if [[ -n "$FB_ID" && "$FB_ID" != "REPLACE_WITH_ACTUAL_SECRET" && -n "$FB_SECRET" && "$FB_SECRET" != "REPLACE_WITH_ACTUAL_SECRET" ]]; then
          echo "✅ Facebook OAuth configured"
          ((VALID_PROVIDERS++))
        else
          echo "⚠️ Facebook OAuth not properly configured"
        fi
        
        # Require at least one complete OAuth provider
        if [[ $VALID_PROVIDERS -ge 1 ]]; then
          echo "✅ $VALID_PROVIDERS OAuth provider(s) properly configured"
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No OAuth providers properly configured"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
  
  # Update secrets if required
  update-keyvault-secrets:
    name: Update Key Vault Secrets
    runs-on: ubuntu-latest
    needs: [validate-keyvault-secrets]
    if: github.event.inputs.update_secrets == 'true' && needs.validate-keyvault-secrets.outputs.secrets-valid == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Update OAuth secrets
      run: |
        echo "🔄 Updating OAuth secrets in Key Vault..."
        
        # Update secrets from GitHub secrets if they are provided
        if [[ -n "${{ secrets.GOOGLE_CLIENT_ID }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Google--ClientId" \
            --value "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --description "Google OAuth Client ID - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Google Client ID"
        fi
        
        if [[ -n "${{ secrets.GOOGLE_CLIENT_SECRET }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Google--ClientSecret" \
            --value "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --description "Google OAuth Client Secret - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Google Client Secret"
        fi
        
        if [[ -n "${{ secrets.MICROSOFT_CLIENT_ID }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Microsoft--ClientId" \
            --value "${{ secrets.MICROSOFT_CLIENT_ID }}" \
            --description "Microsoft OAuth Client ID - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Microsoft Client ID"
        fi
        
        if [[ -n "${{ secrets.MICROSOFT_CLIENT_SECRET }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Microsoft--ClientSecret" \
            --value "${{ secrets.MICROSOFT_CLIENT_SECRET }}" \
            --description "Microsoft OAuth Client Secret - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Microsoft Client Secret"
        fi
        
        if [[ -n "${{ secrets.FACEBOOK_APP_ID }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Facebook--AppId" \
            --value "${{ secrets.FACEBOOK_APP_ID }}" \
            --description "Facebook App ID - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Facebook App ID"
        fi
        
        if [[ -n "${{ secrets.FACEBOOK_APP_SECRET }}" ]]; then
          az keyvault secret set \
            --vault-name ${{ env.KEYVAULT_NAME }} \
            --name "Authentication--Facebook--AppSecret" \
            --value "${{ secrets.FACEBOOK_APP_SECRET }}" \
            --description "Facebook App Secret - Updated by GitHub Actions" \
            --tags "Environment=Production" "Application=SetlistStudio" "UpdatedBy=GitHubActions" "UpdatedDate=$(date +%Y-%m-%d)"
          echo "✅ Updated Facebook App Secret"
        fi
        
        echo "🎉 Secret update completed"
    
    - name: Security cleanup
      if: always()
      run: |
        # Clear any temporary files that might contain secrets
        echo "🧹 Performing security cleanup..."
        
        # Clear shell history that might contain secret values
        history -c 2>/dev/null || true
        
        # Clear any temporary Azure CLI cache
        rm -rf ~/.azure/logs/* 2>/dev/null || true
        
        echo "✅ Security cleanup completed"
  
  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-keyvault-secrets]
    if: needs.validate-keyvault-secrets.outputs.secrets-valid == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build application
      run: |
        dotnet restore SetlistStudio.sln
        dotnet build SetlistStudio.sln --configuration Release --no-restore
        dotnet publish src/SetlistStudio.Web/SetlistStudio.Web.csproj \
          --configuration Release \
          --no-build \
          --output ./publish
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./publish
    
    - name: Configure App Settings
      run: |
        # Configure the web app to use Key Vault
        az webapp config appsettings set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --settings \
            "KeyVault__VaultName=${{ env.KEYVAULT_NAME }}" \
            "ASPNETCORE_ENVIRONMENT=Production"
    
    - name: Enable Managed Identity
      run: |
        # Enable system-assigned managed identity
        PRINCIPAL_ID=$(az webapp identity assign \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --query principalId -o tsv)
        
        # Grant Key Vault access to the managed identity
        az role assignment create \
          --role "Key Vault Secrets User" \
          --assignee $PRINCIPAL_ID \
          --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/${{ env.KEYVAULT_NAME }}"
    
    - name: Verify deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Check application health
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Application health check passed"
            break
          else
            echo "⏳ Waiting for application to start... (attempt $i/5)"
            sleep 15
          fi
          
          if [[ $i -eq 5 ]]; then
            echo "❌ Application health check failed"
            exit 1
          fi
        done
    
    - name: Post-deployment summary
      run: |
        echo "🎉 Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Key Vault**: ${{ env.KEYVAULT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Application URL**: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
        echo "🔒 **Security**: OAuth secrets managed via Azure Key Vault" >> $GITHUB_STEP_SUMMARY

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [security-analysis, build-and-test, validate-keyvault-secrets, deploy-production]
    if: failure()
    
    steps:
    - name: Create failure summary
      run: |
        echo "❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 Failed Jobs:" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.security-analysis.result }}" == "failure" ]]; then
          echo "- 🔒 Security Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
          echo "- 🧪 Build and Test: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.validate-keyvault-secrets.result }}" == "failure" ]]; then
          echo "- 🔑 Key Vault Validation: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "- 🚀 Production Deployment: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Next Steps**:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the failed job logs above" >> $GITHUB_STEP_SUMMARY
        echo "2. Fix identified issues" >> $GITHUB_STEP_SUMMARY
        echo "3. Re-run the deployment workflow" >> $GITHUB_STEP_SUMMARY