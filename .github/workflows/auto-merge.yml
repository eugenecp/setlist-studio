name: Auto-merge

on:
  pull_request:
    types: [labeled, unlabeled, synchronize, opened, edited, ready_for_review]
  pull_request_review:
    types: [submitted, dismissed]
  check_suite:
    types: [completed]
  status:

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  merge:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.state == 'open' &&
      !github.event.pull_request.draft &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')
    steps:
    - name: Check if PR can be merged
      id: check-pr
      uses: actions/github-script@v8
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          
          console.log(`Checking PR #${pr.number}: ${pr.title}`);
          
          // Get detailed PR information
          const { data: pullRequest } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: pr.number
          });
          
          // Check if PR is mergeable
          if (!pullRequest.mergeable) {
            console.log('‚ùå PR is not mergeable (conflicts)');
            return { canMerge: false, reason: 'PR has merge conflicts' };
          }
          
          // Check if PR is approved
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner,
            repo,
            pull_number: pr.number
          });
          
          const latestReviews = {};
          reviews.forEach(review => {
            if (review.state !== 'COMMENTED') {
              latestReviews[review.user.login] = review.state;
            }
          });
          
          const hasApproval = Object.values(latestReviews).includes('APPROVED');
          const hasChangesRequested = Object.values(latestReviews).includes('CHANGES_REQUESTED');
          
          if (!hasApproval) {
            console.log('‚ùå PR is not approved');
            return { canMerge: false, reason: 'PR needs approval' };
          }
          
          if (hasChangesRequested) {
            console.log('‚ùå PR has changes requested');
            return { canMerge: false, reason: 'PR has changes requested' };
          }
          
          // Check status checks and check runs
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner,
            repo,
            ref: pr.head.sha,
            per_page: 100
          });
          
          const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
            owner,
            repo,
            ref: pr.head.sha,
            per_page: 100
          });
          
          // Filter out duplicate statuses (keep latest)
          const latestStatuses = {};
          statuses.forEach(status => {
            if (!latestStatuses[status.context] || 
                new Date(status.created_at) > new Date(latestStatuses[status.context].created_at)) {
              latestStatuses[status.context] = status;
            }
          });
          
          // Check for any failing checks
          const failingCheckRuns = checkRuns.check_runs.filter(run => 
            run.conclusion && !['success', 'neutral', 'skipped'].includes(run.conclusion)
          );
          
          const failingStatuses = Object.values(latestStatuses).filter(status => 
            status.state !== 'success'
          );
          
          if (failingCheckRuns.length > 0) {
            console.log(`‚ùå Failing check runs: ${failingCheckRuns.map(r => r.name).join(', ')}`);
            return { canMerge: false, reason: `Failing check runs: ${failingCheckRuns.map(r => r.name).join(', ')}` };
          }
          
          if (failingStatuses.length > 0) {
            console.log(`‚ùå Failing statuses: ${failingStatuses.map(s => s.context).join(', ')}`);
            return { canMerge: false, reason: `Failing statuses: ${failingStatuses.map(s => s.context).join(', ')}` };
          }
          
          console.log('‚úÖ All checks passed, PR can be merged');
          return { canMerge: true, reason: 'All requirements met' };

    - name: Merge PR if ready
      if: fromJSON(steps.check-pr.outputs.result).canMerge
      uses: actions/github-script@v8
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          
          try {
            console.log(`Attempting to merge PR #${pr.number}...`);
            
            const result = await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: pr.number,
              commit_title: `Auto-merge: ${pr.title} (#${pr.number})`,
              commit_message: `Automatically merged by GitHub Actions\n\n${pr.body || ''}`,
              merge_method: 'squash'
            });
            
            console.log(`‚úÖ Successfully merged PR #${pr.number}`);
            
            // Add success comment
            const isDependabot = pr.user.login === 'dependabot[bot]';
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body: `## ü§ñ Auto-merged Successfully\n\nThis PR was automatically merged because:\n- ‚úÖ All checks passed\n- ‚úÖ PR was approved\n- ‚úÖ Contains the \`auto-merge\` label${isDependabot ? '\n- ü§ñ Created by Dependabot' : ''}\n\n---\n*Merged automatically by GitHub Actions*`
            });
            
          } catch (error) {
            console.log(`‚ùå Failed to merge PR: ${error.message}`);
            
            // Add failure comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr.number,
              body: `## ‚ö†Ô∏è Auto-merge Failed\n\nFailed to automatically merge this PR: ${error.message}\n\nPlease merge manually or check the requirements:\n- ‚úÖ PR must be approved\n- ‚úÖ All checks must pass\n- ‚úÖ No changes requested\n- ‚úÖ Must contain \`auto-merge\` label\n- ‚úÖ Must not be a draft\n\n---\n*Auto-merge attempted by GitHub Actions*`
            });
            
            throw error;
          }

    - name: Log completion
      if: always()
      run: |
        echo "Auto-merge workflow completed"
        echo "PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"