using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Moq;
using SetlistStudio.Core.Entities;
using SetlistStudio.Infrastructure.Data;
using SetlistStudio.Web.Services;
using FluentAssertions;
using Xunit;

namespace SetlistStudio.Tests.Web;

public cl    [Fact]
    public async Task InitializeAsync_ShouldHandleNullServiceProvider()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();

        // Act & Assert
        await Assert.ThrowsAsync<ArgumentNullException>(
            async () => await DatabaseInitializer.InitializeAsync(null!, mockLogger.Object));
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleNullLogger()
    {
        // Arrange
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 0);

        // Act & Assert
        await Assert.ThrowsAsync<ArgumentNullException>(
            async () => await DatabaseInitializer.InitializeAsync(serviceProvider, null!));
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleDatabaseConnectionFailure()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: false, ensureCreatedResult: false, songCount: 0, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database connection test failed");
    }

    [Fact]
    public async Task InitializeAsync_ShouldLogDatabaseCreation_WhenNewDatabaseCreated()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: true, songCount: 0, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database creation result: True (true = created, false = already existed)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldLogExistingDatabase_WhenDatabaseAlreadyExists()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 5, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database creation result: False (true = created, false = already existed)");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Current song count in database: 5");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleExceptionDuringInitialization()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var mockContext = new Mock<SetlistStudioDbContext>();
        
        // Setup the context to throw an exception
        mockContext.Setup(x => x.Database).Throws(new InvalidOperationException("Test exception"));
        
        var mockServiceScope = new Mock<IServiceScope>();
        mockServiceScope.Setup(x => x.ServiceProvider.GetRequiredService<SetlistStudioDbContext>())
                       .Returns(mockContext.Object);

        var mockServiceScopeFactory = new Mock<IServiceScopeFactory>();
        mockServiceScopeFactory.Setup(x => x.CreateScope()).Returns(mockServiceScope.Object);

        var mockServiceProvider = new Mock<IServiceProvider>();
        mockServiceProvider.Setup(x => x.GetRequiredService<IServiceScopeFactory>())
                          .Returns(mockServiceScopeFactory.Object);

        // Act
        await DatabaseInitializer.InitializeAsync(mockServiceProvider.Object, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Error, "An error occurred during database initialization");
    }

    [Fact]
    public async Task InitializeAsync_ShouldLogSuccess_WhenInitializationCompletes()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 10, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed successfully");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleZeroSongCount()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 0, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Current song count in database: 0");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleLargeSongCount()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 1000, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Current song count in database: 1000");
    }

    [Fact]
    public async Task InitializeAsync_ShouldTestConnectionFirst()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 5, useInMemory: false);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database connection test: True");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleServiceProviderWithoutScopeFactory()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var mockServiceProvider = new Mock<IServiceProvider>();
        mockServiceProvider.Setup(x => x.GetRequiredService<IServiceScopeFactory>())
                          .Throws(new InvalidOperationException("Service not found"));

        // Act
        await DatabaseInitializer.InitializeAsync(mockServiceProvider.Object, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Error, "An error occurred during database initialization");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleDbContextCreationFailure()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var mockServiceScope = new Mock<IServiceScope>();
        mockServiceScope.Setup(x => x.ServiceProvider.GetRequiredService<SetlistStudioDbContext>())
                       .Throws(new InvalidOperationException("DbContext creation failed"));

        var mockServiceScopeFactory = new Mock<IServiceScopeFactory>();
        mockServiceScopeFactory.Setup(x => x.CreateScope()).Returns(mockServiceScope.Object);

        var mockServiceProvider = new Mock<IServiceProvider>();
        mockServiceProvider.Setup(x => x.GetRequiredService<IServiceScopeFactory>())
                          .Returns(mockServiceScopeFactory.Object);

        // Act
        await DatabaseInitializer.InitializeAsync(mockServiceProvider.Object, mockLogger.Object);

        // Assert
        VerifyLogMessage(mockLogger, LogLevel.Error, "An error occurred during database initialization");
    }

    [Fact]
    public async Task InitializeAsync_ShouldDisposeServiceScope()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var mockServiceScope = new Mock<IServiceScope>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 0);

        // Setup a mock service scope factory that returns our mock scope
        var mockServiceScopeFactory = new Mock<IServiceScopeFactory>();
        var originalScope = serviceProvider.GetRequiredService<IServiceScopeFactory>().CreateScope();
        mockServiceScope.Setup(x => x.ServiceProvider).Returns(originalScope.ServiceProvider);
        mockServiceScopeFactory.Setup(x => x.CreateScope()).Returns(mockServiceScope.Object);

        var mockServiceProvider = new Mock<IServiceProvider>();  
        mockServiceProvider.Setup(x => x.GetRequiredService<IServiceScopeFactory>())
                          .Returns(mockServiceScopeFactory.Object);

        // Act
        await DatabaseInitializer.InitializeAsync(mockServiceProvider.Object, mockLogger.Object);

        // Assert
        mockServiceScope.Verify(x => x.Dispose(), Times.Once);
        originalScope.Dispose();
    }

    private static void VerifyLogMessage(Mock<ILogger> mockLogger, LogLevel level, string message)
    {
        mockLogger.Verify(
            x => x.Log(
                level,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains(message)),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.AtLeastOnce);
    }
}InitializerTests
{
    [Fact]
    public async Task InitializeAsync_ShouldSkipInitialization_WhenUsingInMemoryDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 5);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldSkipConnectionTest_WhenUsingInMemoryDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 0);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldSkipDatabaseCreation_WhenUsingInMemoryDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: false, ensureCreatedResult: true, songCount: 0);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }



    [Fact]
    public async Task InitializeAsync_ShouldSkipInitialization_WhenUsingInMemoryDatabaseWithData()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: true, songCount: 5);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldSkipDatabaseCreationLogging_WhenUsingInMemoryDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: true, songCount: 0);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldSkipSongCounting_WhenUsingInMemoryDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect: true, ensureCreatedResult: false, songCount: 42);

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - Should skip initialization for in-memory databases
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Theory]
    [InlineData(true, false, 0)]
    [InlineData(true, false, 10)]
    [InlineData(false, true, 0)]
    [InlineData(false, true, 5)]
    public async Task InitializeAsync_ShouldSkipInitializationForAllInMemoryDatabaseStates(
        bool canConnect, bool ensureCreatedResult, int songCount)
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var serviceProvider = CreateServiceProvider(canConnect, ensureCreatedResult, songCount);

        // Act
        var exception = await Record.ExceptionAsync(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));

        // Assert - Should skip initialization for all in-memory database states
        exception.Should().BeNull();
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    private static IServiceProvider CreateServiceProvider(bool canConnect, bool ensureCreatedResult, int songCount)
    {
        var services = new ServiceCollection();
        
        // Use in-memory database for testing
        var databaseName = Guid.NewGuid().ToString();
        services.AddDbContext<SetlistStudioDbContext>(options =>
        {
            options.UseInMemoryDatabase(databaseName);
        });

        var serviceProvider = services.BuildServiceProvider();
        
        // Seed the database with test data if needed
        using var scope = serviceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<SetlistStudioDbContext>();
        
        if (songCount > 0)
        {
            for (int i = 1; i <= songCount; i++)
            {
                context.Songs.Add(new Song 
                { 
                    Id = i,
                    Title = $"Test Song {i}",
                    Artist = $"Test Artist {i}",
                    UserId = "test-user"
                });
            }
            context.SaveChanges();
        }
        
        return serviceProvider;
    }



    [Fact]
    public async Task InitializeAsync_ShouldLogWarning_WhenCannotConnectToDatabase()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use a SQLite connection string that will cause an exception during EnsureCreatedAsync
        // Use a malformed connection string that SQLite cannot handle
        services.AddDbContext<SetlistStudioDbContext>(options =>
        {
            options.UseSqlite("Data Source=/dev/null/invalid.db"); // This will fail on Linux as /dev/null is a device file
        });
        
        var serviceProvider = services.BuildServiceProvider();

        // Act & Assert - The invalid database path should cause an exception
        var exception = await Assert.ThrowsAsync<Microsoft.Data.Sqlite.SqliteException>(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));
        
        // Verify that we got the expected logging
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
        // Don't verify specific connection string details as they might vary by platform
    }

    [Fact]
    public async Task InitializeAsync_ShouldLogConnectionString_WhenNotContainingDataSource()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use a connection string without "Data Source=" to test the other path
        // This will cause an exception but won't trigger the file info logging
        services.AddDbContext<SetlistStudioDbContext>(options =>
        {
            options.UseSqlite("Server=invalid;Database=test");
        });
        
        var serviceProvider = services.BuildServiceProvider();

        // Act & Assert
        var exception = await Record.ExceptionAsync(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));
        
        exception.Should().NotBeNull();
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Connection string: Server=invalid;Database=test");
    }

    [Fact]
    public async Task InitializeAsync_ShouldRetryCountingOnFailure_AndLogRetryAttempts()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use InMemory provider but with a specific database name to simulate retry behavior
        services.AddDbContext<SetlistStudioDbContext>(options =>
            options.UseInMemoryDatabase($"RetryTestDb_{Guid.NewGuid()}")
        );
        var serviceProvider = services.BuildServiceProvider();

        // Seed the database - but first ensure it's created
        using (var scope = serviceProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<SetlistStudioDbContext>();
            // Ensure the database and schema are created before adding data
            context.Database.EnsureCreated();
            context.Songs.AddRange(
                new Song { Title = "Song1" },
                new Song { Title = "Song2" },
                new Song { Title = "Song3" },
                new Song { Title = "Song4" },
                new Song { Title = "Song5" }
            );
            context.SaveChanges();
        }

        // Act
        await DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object);

        // Assert - InMemory database will be detected and skipped
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Information, "In-memory database detected - skipping initialization for test environment");
        VerifyLogMessage(mockLogger, LogLevel.Information, "Database initialization completed (skipped for tests)");
    }

    [Fact]
    public async Task InitializeAsync_ShouldLogDatabaseFileInfo_WhenExceptionOccursWithDataSource()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Create a temporary database file to test file info logging
        var tempDbPath = Path.Combine(Path.GetTempPath(), $"test_database_{Guid.NewGuid()}.db");
        
        try
        {
            // Create the directory and file
            Directory.CreateDirectory(Path.GetDirectoryName(tempDbPath)!);
            File.WriteAllText(tempDbPath, "test");
            
            services.AddDbContext<SetlistStudioDbContext>(options =>
            {
                options.UseSqlite($"Data Source={tempDbPath};");
            });
            
            var serviceProvider = services.BuildServiceProvider();
            
            // Force an exception by trying to create a table on a file that's not a valid database
            var exception = await Record.ExceptionAsync(
                () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));
            
            // Dispose the service provider to release any file handles
            serviceProvider.Dispose();

            // Assert
            exception.Should().NotBeNull();
            VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
            VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
            VerifyLogMessage(mockLogger, LogLevel.Error, $"Connection string: Data Source={tempDbPath};");
            VerifyLogMessage(mockLogger, LogLevel.Error, "Database file path:");
            VerifyLogMessage(mockLogger, LogLevel.Error, "Database file exists: True");
            VerifyLogMessage(mockLogger, LogLevel.Error, "Database directory exists: True");
            VerifyLogMessage(mockLogger, LogLevel.Error, "Database directory permissions: Readable");
        }
        finally
        {
            // Cleanup - try to delete but don't fail if file is locked
            try
            {
                if (File.Exists(tempDbPath))
                {
                    File.Delete(tempDbPath);
                }
            }
            catch (IOException)
            {
                // Ignore file access issues during cleanup
            }
        }
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleInnerException_WhenGettingDatabaseFileInfo()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use a SQLite connection string pointing to a read-only directory to force errors
        var readOnlyPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "test.db");
        services.AddDbContext<SetlistStudioDbContext>(options =>
            options.UseSqlite($"Data Source={readOnlyPath}")
        );
        var serviceProvider = services.BuildServiceProvider();

        // Act
        var exception = await Record.ExceptionAsync(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));

        // Assert
        exception.Should().NotBeNull();
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleNullConnectionString_InErrorPath()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use an invalid connection string that will cause connection failures
        services.AddDbContext<SetlistStudioDbContext>(options =>
            options.UseSqlite("Invalid Connection String")
        );
        var serviceProvider = services.BuildServiceProvider();

        // Act
        var exception = await Record.ExceptionAsync(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));

        // Assert
        exception.Should().NotBeNull();
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
    }

    [Fact]
    public async Task InitializeAsync_ShouldHandleNonDataSourceConnectionString_InErrorPath()
    {
        // Arrange
        var mockLogger = new Mock<ILogger>();
        var services = new ServiceCollection();
        
        // Use a SQL Server connection string (non-SQLite) that will fail
        services.AddDbContext<SetlistStudioDbContext>(options =>
            options.UseSqlServer("Server=nonexistent;Database=test;Integrated Security=true")
        );
        var serviceProvider = services.BuildServiceProvider();

        // Act
        var exception = await Record.ExceptionAsync(
            () => DatabaseInitializer.InitializeAsync(serviceProvider, mockLogger.Object));

        // Assert
        exception.Should().NotBeNull();
        VerifyLogMessage(mockLogger, LogLevel.Information, "Starting database initialization...");
        VerifyLogMessage(mockLogger, LogLevel.Error, "Database initialization failed:");
    }

    private static void VerifyLogMessage(Mock<ILogger> mockLogger, LogLevel logLevel, string expectedMessage)
    {
        mockLogger.Verify(
            x => x.Log(
                logLevel,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains(expectedMessage)),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.AtLeastOnce);
    }
}